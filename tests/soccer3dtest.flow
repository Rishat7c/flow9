import material/material_ui;
import material/extra/filebrowser/material_filebrowser;

printF3DChildren(id : string, object : F3DObject) -> F3DObject {
	switch (object : F3DObject) {
		F3DScene(items): {
			println(id + " Group");

			F3DScene(fmapi(items, \i, it -> printF3DChildren(id + (if (strlen(id) > 0) " " else "") + i2s(i), it)));
		}
		F3DNativeObject(clip): {
			println(id + " " + get3DObjectType(clip));

			object;
		}
		F3DMutable(innerObject): {
			F3DMutable(fselect(innerObject, FLift(\it -> printF3DChildren(id, it))));
		}
		default : {
			println(id + " " + object.structname);

			object;
		}
	}
}

main() {
	manager = makeMaterialManager([]);

	currentScene = make([F3DSceneLoader("images/3d/soccer/soc_field.json")]);

	scene = F3DChildren(F3DScene(currentScene), \c -> printF3DChildren("", c));
	camera = F3DPosition(F3DPerspectiveCamera(const(50.0), const(1.0), const(0.01), const(6000.0)), make(0.0), make(0.0), make(1000.0));

	exportFn = ref \ -> "";

	MLines2(
		MMenuPanel(
			[
				MMenu(
					MTextButton("File", nop, [], []),
					[
						MMenuSingleLine(
							"Open Scene",
							[
								MPrimaryAction(MIcon("folder_open", [])),
								MOnClick(\ ->
									openFileDialog(1, ["*.txt", "*.json"], \ff ->
										iter(ff, \f ->
											readFileClient(
												f,
												"text",
												\s -> {
													next(currentScene, [F3DScene(const([]))]);
													next(currentScene, [F3DJsonObject(s)]);
												},
												println
											)
										)
									)
								)
							]
						),
						MMenuSingleLine(
							"Save Scene",
							[
								MPrimaryAction(MIcon("save", [])),
								MOnClick(\ -> {saveFile("scene.json", ^exportFn(), "text")})
							]
						)
					],
					[
						MMenuIndent()
					]
				)
			],
			[]
		)
		|> (\f -> MAvailableWidth(f, const(608.0))),
		M3DStage(
			const(WidthHeight(600.0, 600.0)),
			scene,
			camera,
			[
				F3DExportScene(exportFn),
				F3DTransformControlsEnabled(const(true))
			]
		)
		|> (\f -> MFrame(0.0, 4.0, [MStroke(getPrimaryColor(manager)), StrokeWidth(2.0)], f))
		|> (\f -> MBorder4(4.0, f))
	)
	|> MCenterX
	|> (\f -> mrender(manager, true, f))
}